#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Thu Oct  7 09:51:28 2010"
echo "(version 2.22, March 28, 2010)"

# execute via : 
#   tcsh -xef proc_subj |& tee output.proc_subj

# ================================= setup ==================================
# script setup

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = SUBJ
endif

# assign output directory name
set output_dir = subj.results

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "$subj.results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 1`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy anatomy to results dir
3dcopy S19_spgr+orig $output_dir/S19_spgr

# ================================== tcat ==================================
# apply 3dTcat to copy input dsets to results dir, while
# removing the first 4 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat S19_word_epan+orig'[4..$]'

# and enter the results directory
cd $output_dir

# ================================= tshift =================================
# run 3dToutcount and 3dTshift for each run
foreach run ( $runs )
    3dToutcount -automask pb00.$subj.r$run.tcat+orig > outcount_r$run.1D

    3dTshift -tzero 0 quintic -prefix pb01.$subj.r$run.tshift \
             pb00.$subj.r$run.tcat+orig
end

# ================================= align ==================================
# align anatomy to EPI registration base
align_epi_anat.py -anat2epi            \
       -anat S19_spgr+orig             \
       -epi pb01.$subj.r01.tshift+orig \
       -epi_base 2 -volreg off -tshift off

# ================================== tlrc ==================================
# warp anatomy to standard space
@auto_tlrc -base TT_N27+tlrc -input S19_spgr_al+orig -no_ss -suffix NONE

# ================================= volreg =================================
# align each dset to base volume
foreach run ( $runs )
    # register each volume to the base
    3dvolreg -verbose -zpad 1 -base pb01.$subj.r01.tshift+orig'[2]' \
             -1Dfile dfile.r$run.1D -prefix pb02.$subj.r$run.volreg \
             -cubic                                                 \
             pb01.$subj.r$run.tshift+orig
end

# make a single file of registration params
cat dfile.r??.1D > dfile.rall.1D

# compute motion magnitude time series: the Euclidean norm
# (sqrt(sum squares)) of the motion parameter derivatives
1d_tool.py -infile dfile.rall.1D -set_nruns 1                       \
           -derivative  -collapse_cols euclidean_norm               \
           -write motion_${subj}_enorm.1D

# ================================== blur ==================================
# blur each volume of each run
foreach run ( $runs )
    3dmerge -1blur_fwhm 4.0 -doall -prefix pb03.$subj.r$run.blur \
            pb02.$subj.r$run.volreg+orig
end

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
    3dAutomask -dilate 1 -prefix rm.mask_r$run pb03.$subj.r$run.blur+orig
end

# only 1 run, so copy this to full_mask
3dcopy rm.mask_r01+orig full_mask.$subj

# ---- create subject anatomy mask, mask_anat.$subj+orig ----
#      (resampled from aligned anat)
3dresample -master full_mask.$subj+orig -prefix rm.resam.anat \
           -input S19_spgr_al+orig

# convert resampled anat brain to binary mask
3dcalc -a rm.resam.anat+orig -expr 'ispositive(a)' -prefix mask_anat.$subj

# ================================= scale ==================================
# scale each voxel time series to have a mean of 100
# (be sure no negatives creep in)
# (subject to a range of [0,200])
foreach run ( $runs )
    3dTstat -prefix rm.mean_r$run pb03.$subj.r$run.blur+orig
    3dcalc -a pb03.$subj.r$run.blur+orig -b rm.mean_r$run+orig \
           -expr 'min(200, a/b*100)*step(a)*step(b)'           \
           -prefix pb04.$subj.r$run.scale
end

# ================================ regress =================================
# run the regression analysis
3dDeconvolve -input pb04.$subj.r??.scale+orig.HEAD                   \
    -polort 5                                                        \
    -num_stimts 6                                                    \
    -stim_file 1 dfile.rall.1D'[0]' -stim_base 1 -stim_label 1 roll  \
    -stim_file 2 dfile.rall.1D'[1]' -stim_base 2 -stim_label 2 pitch \
    -stim_file 3 dfile.rall.1D'[2]' -stim_base 3 -stim_label 3 yaw   \
    -stim_file 4 dfile.rall.1D'[3]' -stim_base 4 -stim_label 4 dS    \
    -stim_file 5 dfile.rall.1D'[4]' -stim_base 5 -stim_label 5 dL    \
    -stim_file 6 dfile.rall.1D'[5]' -stim_base 6 -stim_label 6 dP    \
    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                          \
    -fitts fitts.$subj                                               \
    -errts errts.$subj                                               \
    -bucket stats.$subj


# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif


# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs.$subj pb04.$subj.r??.scale+orig.HEAD

# create ideal files for each stim type

# =========================== gen_epi_review.py ============================
# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj \
    -dsets pb00.$subj.r??.tcat+orig.HEAD

# ================================ cleanup =================================

# remove temporary rm.* files
\rm -f rm.*

# return to parent directory
cd ..




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id SUBJ -script proc_subj -out_dir subj.results -dsets \
#     S19_word_epan+orig -blocks tcat tshift align tlrc volreg blur mask    \
#     scale regress -tcat_remove_first_trs 4 -tshift_interp quintic         \
#     -copy_anat S19_spgr+orig
