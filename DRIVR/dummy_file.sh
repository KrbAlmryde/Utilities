#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Wed Mar 21 13:45:05 2012"
echo "(version 3.13, March 14, 2012)"

# execute via : 
#   tcsh -xef proc.TS004 |& tee output.proc.TS004

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 9 Mar 2012
if ( $status ) then
	echo "** this script requires newer AFNI binaries (than 9 Mar 2012)"
	echo "   (consider: @update.afni.binaries -defaults)"
	exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
	set subj = $argv[1]
else
	set subj = TS004
endif

# assign output directory name
set output_dir = $subj.results

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
	echo output dir "$subj.results" already exists
	exit
endif

# set list of runs
set runs = (`count -digits 2 1 1`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy stim files into stimulus directory
cp stim.SP1.animal.1D stim.SP1.food.1D $output_dir/stimuli

# copy anatomy to results dir
3dcopy TS004.spgr+orig $output_dir/TS004.spgr
3dcopy TS004.fse+orig $output_dir/TS004.fse

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir, while
# removing the first 4 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat+orig TS004.SP1.epan.nii'[4..$]'

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
touch out.pre_ss_warn.txt
foreach run ( $runs )
	3dToutcount -automask -fraction -polort 4 -legendre                     \
				pb00.$subj.r$run.tcat+orig > outcount_r$run.1D

	# censor outlier TRs per run, ignoring the first 0 TRs
	# - censor when more than 0.1 of automask voxels are outliers
	# - step() defines which TRs to remove via censoring
	1deval -a outcount_r$run.1D -expr "1-step(a-0.1)" > rm.out.cen.r$run.1D

	# outliers at TR 0 might suggest pre-steady state TRs
	if ( `1deval -a outcount_r$run.1D"{0}" -expr "step(a-0.4)"` ) then
		echo "** TR #0 outliers: possible pre-steady state TRs in run $run" \
			>> out.pre_ss_warn.txt
	endif
end

# catenate outlier counts into a single time series
cat outcount_r??.1D > outcount.rall.1D

# catenate outlier censor files into a single time series
cat rm.out.cen.r*.1D > outcount_${subj}_censor.1D

# ================================= tshift =================================
# time shift data so all slice timing is the same 
foreach run ( $runs )
	3dTshift -tzero 0 -quintic -prefix pb01.$subj.r$run.tshift \
			 pb00.$subj.r$run.tcat+orig
end

# ================================= align ==================================

align_epi_anat.py -dset1to2 -cmass cmass -dset1 ${subj}.spgr+orig \
		-dset2 ${subj}.fse+orig -cost lpa -suffix .cmass

# for e2a: compute anat alignment transformation to EPI registration base
# (new anat will be intermediate, stripped, TS004.spgr_strip+orig)
align_epi_anat.py -anat2epi -anat TS004.spgr.cmass+orig              \
	   -save_orig_skullstrip TS004.spgr_strip -suffix _al_junk \
	   -epi pb01.$subj.r01.tshift+orig -epi_base 149           \
	   -volreg off -tshift off

# ================================== tlrc ==================================
# warp anatomy to standard space
@auto_tlrc -base TT_N27+tlrc -input TS004.spgr_strip+orig -no_ss -suffix NONE

# ================================= volreg =================================
# align each dset to base volume, align to anat, warp to tlrc space

# verify that we have a +tlrc warp dataset
if ( ! -f TS004.spgr_strip+tlrc.HEAD ) then
	echo "** missing +tlrc warp dataset: TS004.spgr_strip+tlrc.HEAD" 
	exit
endif

# create an all-1 dataset to mask the extents of the warp
3dcalc -a pb01.$subj.r01.tshift+orig -expr 1 -prefix rm.epi.all1

# register and warp
foreach run ( $runs )
	# register each volume to the base
	3dvolreg -verbose -zpad 1 -base pb01.$subj.r01.tshift+orig'[149]' \
			 -1Dfile dfile.r$run.1D -prefix rm.epi.volreg.r$run       \
			 -cubic                                                   \
			 -1Dmatrix_save mat.r$run.vr.aff12.1D                     \
			 pb01.$subj.r$run.tshift+orig

	# catenate volreg, epi2anat and tlrc transformations
	cat_matvec -ONELINE                                               \
			   TS004.spgr_strip+tlrc::WARP_DATA -I                    \
			   TS004.spgr.cmass_al_junk_mat.aff12.1D -I                     \
			   mat.r$run.vr.aff12.1D > mat.r$run.warp.aff12.1D

	# apply catenated xform : volreg, epi2anat and tlrc
	3dAllineate -base TS004.spgr_strip+tlrc                           \
				-input pb01.$subj.r$run.tshift+orig                   \
				-1Dmatrix_apply mat.r$run.warp.aff12.1D               \
				-mast_dxyz 1                                        \
				-prefix rm.epi.nomask.r$run 

	# warp the all-1 dataset for extents masking 
	3dAllineate -base TS004.spgr_strip+tlrc                           \
				-input rm.epi.all1+orig                               \
				-1Dmatrix_apply mat.r$run.warp.aff12.1D               \
				-mast_dxyz 1 -final NN -quiet                       \
				-prefix rm.epi.1.r$run 

	# make an extents intersection mask of this run
	3dTstat -min -prefix rm.epi.min.r$run rm.epi.1.r$run+tlrc
end

# make a single file of registration params
cat dfile.r??.1D > dfile.rall.1D

# ----------------------------------------
# create the extents mask: mask_epi_extents+tlrc
# (this is a mask of voxels that have valid data at every TR)
# (only 1 run, so just use 3dcopy to keep naming straight)
3dcopy rm.epi.min.r01+tlrc mask_epi_extents

# and apply the extents mask to the EPI data 
# (delete any time series with missing data)
foreach run ( $runs )
	3dcalc -a rm.epi.nomask.r$run+tlrc -b mask_epi_extents+tlrc       \
		   -expr 'a*b' -prefix pb02.$subj.r$run.volreg
end

# create an anat_final dataset, aligned with stats
3dcopy TS004.spgr_strip+tlrc anat_final.$subj

# ================================== blur ==================================
# blur each volume of each run
foreach run ( $runs )
	3dBlurInMask -preserve -FWHM 4.0 -automask \
				 -prefix pb03.$subj.r$run.blur \
				 pb02.$subj.r$run.volreg+tlrc
end

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
	3dAutomask -dilate 1 -prefix rm.mask_r$run pb03.$subj.r$run.blur+tlrc
end

# only 1 run, so copy this to full_mask
3dcopy rm.mask_r01+tlrc full_mask.$subj

# ---- create subject anatomy mask, mask_anat.$subj+tlrc ----
#      (resampled from tlrc anat)
3dresample -master full_mask.$subj+tlrc -prefix rm.resam.anat      \
		   -input TS004.spgr_strip+tlrc

# convert resampled anat brain to binary mask
3dcalc -a rm.resam.anat+tlrc -expr 'ispositive(a)' -prefix mask_anat.$subj

# compute overlaps between anat and EPI masks
3dABoverlap -no_automask full_mask.$subj+tlrc mask_anat.$subj+tlrc \
			|& tee out.mask_overlap.txt

# ---- create group anatomy mask, mask_group+tlrc ----
#      (resampled from tlrc base anat, TT_N27+tlrc)
3dresample -master full_mask.$subj+tlrc -prefix ./rm.resam.group   \
		   -input /Volumes/Data/ETC/TT_N27+tlrc

# convert resampled group brain to binary mask
3dcalc -a rm.resam.group+tlrc -expr 'ispositive(a)' -prefix mask_group

# ================================= scale ==================================
# scale each voxel time series to have a mean of 100
# (be sure no negatives creep in)
# (subject to a range of [0,200])
foreach run ( $runs )
	3dTstat -prefix rm.mean_r$run pb03.$subj.r$run.blur+tlrc
	3dcalc -a pb03.$subj.r$run.blur+tlrc -b rm.mean_r$run+tlrc \
		   -c mask_epi_extents+tlrc                            \
		   -expr 'c * min(200, a/b*100)*step(a)*step(b)'       \
		   -prefix pb04.$subj.r$run.scale
end

# ================================ regress =================================

# compute de-meaned motion parameters (for use in regression)
1d_tool.py -infile dfile.rall.1D -set_nruns 1                                \
		   -demean -write motion_demean.1D

# compute motion parameter derivatives (for use in regression)
1d_tool.py -infile dfile.rall.1D -set_nruns 1                                \
		   -derivative -demean -write motion_deriv.1D

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -infile dfile.rall.1D -set_nruns 1                                \
	-set_tr 3.5 -show_censor_count -censor_prev_TR                           \
	-censor_motion 1 motion_${subj}

# combine multiple censor files
1deval -a motion_${subj}_censor.1D -b outcount_${subj}_censor.1D             \
	   -expr "a*b" > censor_${subj}_combined_2.1D

# run the regression analysis
3dDeconvolve -input pb04.$subj.r??.scale+tlrc.HEAD                           \
	-censor censor_${subj}_combined_2.1D                                     \
	-polort 4                                                                \
	-num_stimts 14                                                           \
	-stim_times 1 stimuli/stim.SP1.animal.1D 'GAM'                           \
	-stim_label 1 animal                                                     \
	-stim_times 2 stimuli/stim.SP1.food.1D 'GAM'                             \
	-stim_label 2 food                                                       \
	-stim_file 3 motion_demean.1D'[0]' -stim_base 3 -stim_label 3 roll_01    \
	-stim_file 4 motion_demean.1D'[1]' -stim_base 4 -stim_label 4 pitch_01   \
	-stim_file 5 motion_demean.1D'[2]' -stim_base 5 -stim_label 5 yaw_01     \
	-stim_file 6 motion_demean.1D'[3]' -stim_base 6 -stim_label 6 dS_01      \
	-stim_file 7 motion_demean.1D'[4]' -stim_base 7 -stim_label 7 dL_01      \
	-stim_file 8 motion_demean.1D'[5]' -stim_base 8 -stim_label 8 dP_01      \
	-stim_file 9 motion_deriv.1D'[0]' -stim_base 9 -stim_label 9 roll_02     \
	-stim_file 10 motion_deriv.1D'[1]' -stim_base 10 -stim_label 10 pitch_02 \
	-stim_file 11 motion_deriv.1D'[2]' -stim_base 11 -stim_label 11 yaw_02   \
	-stim_file 12 motion_deriv.1D'[3]' -stim_base 12 -stim_label 12 dS_02    \
	-stim_file 13 motion_deriv.1D'[4]' -stim_base 13 -stim_label 13 dL_02    \
	-stim_file 14 motion_deriv.1D'[5]' -stim_base 14 -stim_label 14 dP_02    \
	-bout                                                                    \
	-jobs 4                                                                  \
	-fout -tout -x1D X.xmat.1D -xjpeg X.jpg                                  \
	-x1D_uncensored X.nocensor.xmat.1D                                       \
	-errts errts.$subj                                                       \
	-bucket stats.$subj


# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
	echo '---------------------------------------'
	echo '** 3dDeconvolve error, failing...'
	echo '   (consider the file 3dDeconvolve.err)'
	exit
endif


# display any large pariwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs.$subj pb04.$subj.r??.scale+tlrc.HEAD

# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
3dTstat -mean -prefix rm.signal.all all_runs.$subj+tlrc
3dTstat -stdev -prefix rm.noise.all errts.$subj+tlrc
3dcalc -a rm.signal.all+tlrc                                                 \
	   -b rm.noise.all+tlrc                                                  \
	   -c full_mask.$subj+tlrc                                               \
	   -expr 'c*a/b' -prefix TSNR.$subj 

# create ideal files for fixed response stim types
1dcat X.nocensor.xmat.1D'[5]' > ideal_animal.1D
1dcat X.nocensor.xmat.1D'[6]' > ideal_food.1D

# compute sum of non-baseline regressors from the X-matrix
# (use 1d_tool.py to get list of regressor colums)
set reg_cols = `1d_tool.py -infile X.nocensor.xmat.1D -show_indices_interest`
3dTstat -sum -prefix sum_ideal.1D X.nocensor.xmat.1D"[$reg_cols]"

# also, create a stimulus-only X-matrix, for easy review
1dcat X.nocensor.xmat.1D"[$reg_cols]" > X.stim.xmat.1D

# ============================ blur estimation =============================
# compute blur estimates
touch blur_est.$subj.1D   # start with empty file

# -- estimate blur for each run in epits --
touch blur.epits.1D

set b0 = 0     # first index for current run
set b1 = -1    # will be last index for current run
foreach reps ( 150 )
	@ b1 += $reps  # last index for current run
	3dFWHMx -detrend -mask full_mask.$subj+tlrc                              \
		all_runs.$subj+tlrc"[$b0..$b1]" >> blur.epits.1D
	@ b0 += $reps  # first index for next run
end

# compute average blur and append
set blurs = ( `cat blur.epits.1D` )
echo average epits blurs: $blurs
echo "$blurs   # epits blur estimates" >> blur_est.$subj.1D

# -- estimate blur for each run in errts --
touch blur.errts.1D

set b0 = 0     # first index for current run
set b1 = -1    # will be last index for current run
foreach reps ( 150 )
	@ b1 += $reps  # last index for current run
	3dFWHMx -detrend -mask full_mask.$subj+tlrc                              \
		errts.$subj+tlrc"[$b0..$b1]" >> blur.errts.1D
	@ b0 += $reps  # first index for next run
end

# compute average blur and append
set blurs = ( `cat blur.errts.1D` )
echo average errts blurs: $blurs
echo "$blurs   # errts blur estimates" >> blur_est.$subj.1D


# add 3dClustSim results as attributes to the stats dset
set fxyz = ( `tail -1 blur_est.$subj.1D` )
3dClustSim -both -NN 123 -mask full_mask.$subj+tlrc                          \
		   -fwhmxyz $fxyz[1-3] -prefix ClustSim
3drefit -atrstring AFNI_CLUSTSIM_MASK file:ClustSim.mask                     \
		-atrstring AFNI_CLUSTSIM_NN1  file:ClustSim.NN1.niml                 \
		-atrstring AFNI_CLUSTSIM_NN2  file:ClustSim.NN2.niml                 \
		-atrstring AFNI_CLUSTSIM_NN3  file:ClustSim.NN3.niml                 \
		stats.$subj+tlrc


# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj \
	-dsets pb00.$subj.r??.tcat+orig.HEAD

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -mot_limit 1.0 -out_limit 0.1 -exit0

# ========================== auto block: finalize ==========================

# remove temporary rm.* files
\rm -f rm.*

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) ./@ss_review_basic |& tee out.ss_review.$subj.txt

# return to parent directory
cd ..




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id TS004 -dsets TS004.SP1.epan.nii -do_block align tlrc \
#     -copy_anat /Volumes/Data/TAP/TEST/TS004.spgr+orig                      \
#     -tcat_remove_first_trs 4 -volreg_align_to last -volreg_align_e2a       \
#     -volreg_tlrc_warp -blur_in_automask -regress_stim_times                \
#     stim.SP1.animal.1D stim.SP1.food.1D -regress_stim_labels animal food   \
#     -regress_apply_mot_types demean deriv -regress_censor_motion 1.0       \
#     -regress_censor_outliers 0.1 -regress_compute_fitts -regress_opts_3dD  \
#     -bout -jobs 4 -regress_run_clustsim yes -regress_est_blur_epits        \
#     -regress_est_blur_errts
