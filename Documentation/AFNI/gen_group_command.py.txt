
=============================================================================
gen_group_command.py    - generate group commands: 3dttest++, 3dMEMA
                        - todo: 3dANOVA2, 3dANOVA3, 3dttest?, GroupAna?

   This program is to assist in writing group commands.  The hardest part (or
   most tedious) is generally listing datasets and such, and that is the main
   benefit of using this program.

   If used without sufficient options (which might be typical), the generated
   commands will not be complete (e.g. they might fail).  So either provide
   sufficient passed options via -options or plan to edit the resulting script.

   If -write_script is not given, the command is written to stdout.

------------------------------------------
examples (by program)

   A. 3dttest++ (not 3dttest)

      Note: these commands apply to the sample group data under
            AFNI_data6/group_results.

    * Note: The 3dttest++ program defaults to setA minus setB, which is the
            opposite of 3dttest and 3dMEMA (though it might be more natural).
            The direction of the test can be further specified using either
            -AminusB or -BminusA, which is always included in the resulting
            command if there are 2 sets of data.

            This program will always supply one of -AminusB or -BminusA, to be
            clear.  If the user does not provide one, -AminusB will be used.

            Note also that 3dttest uses sub-brick labels which should make
            this clear.

      1. The most simple case, providing just the datasets.  The subject IDs
         will be extracted from the dataset names.  Since no sub-bricks are
         provided, the betas will default to sub-brick 0 and the test will be
         the mean compared with 0.

            gen_group_command.py -command 3dttest++        \
                                 -dsets REML*.HEAD

      2. Specify the sub-bricks and set labels to compare Vrel vs. Arel.
         Write the command to the file cmd.tt++.2.

            gen_group_command.py -command 3dttest++        \
                                 -write_script cmd.tt++.2  \
                                 -prefix tt++.2_V-A        \
                                 -dsets REML*.HEAD         \
                                 -set_labels Vrel Arel     \
                                 -subs_betas 'Vrel#0_Coef' 'Arel#0_Coef'

      3. Request a paired t-test and apply a mask.

            gen_group_command.py -command 3dttest++                         \
                                 -write_script cmd.tt++.3                   \
                                 -prefix tt++.3_V-A_paired                  \
                                 -dsets REML*.HEAD                          \
                                 -set_labels Vrel Arel                      \
                                 -subs_betas  'Vrel#0_Coef' 'Arel#0_Coef'   \
                                 -options                                   \
                                    -paired -mask mask+tlrc

      4. Exclude voxels that are identically zero across more than 20% of the
         input datasets (presumably masked at the single subject level).
         Convert output directly to z, since the DOF will vary across space.

            gen_group_command.py -command 3dttest++                         \
                                 -write_script cmd.tt++.4                   \
                                 -prefix tt++.4_V-A_zskip                   \
                                 -dsets REML*.HEAD                          \
                                 -set_labels Vrel Arel                      \
                                 -subs_betas  'Vrel#0_Coef' 'Arel#0_Coef'   \
                                 -options                                   \
                                    -zskip 0.8 -toz

      5. Use covariates to account for a sex difference.  We might encode
         females as 0 and males as 1 to get an intercept (main effect) that
         applies to females (if we do not do any centering).  However, we
         want a main effect for the average between males and females, and
         therefore have used -1 for males and +1 for females.  Add NONE
         for centering so that 3dttest++ does not do any.

         Females have subject indices: 0, 1, 2, 3 and 5.
         Males   have subject indices: 4 and 6 through 9 (the last).

            gen_group_command.py -command 3dttest++             \
                                 -write_script cmd.tt++.5       \
                                 -prefix tt++.5_covary          \
                                 -dsets data/OLSQ*.HEAD         \
                                 -subs_betas 'Vrel#0_Coef'      \
                                 -options                       \
                                    -covariates sex_encode.txt  \
                                    -center NONE


      6. Use -dset_index0_list to compare female subjects to males.
         Both subject types are in the same directory (10 subjects total).
         So the -dsets options will both specify the same list, which will
         then be paired down via -dset_index0_list to indicate only females
         and only males.

         Females have subject indices: 0, 1, 2, 3 and 5.
         Males   have subject indices: 4 and 6 through 9 (the last).

            gen_group_command.py -command 3dttest++             \
                                 -write_script cmd.tt++.6       \
                                 -prefix tt++.6_F-M             \
                                 -dsets data/OLSQ*.HEAD         \
                                 -dset_index0_list '0..3,5'     \
                                 -dsets data/OLSQ*.HEAD         \
                                 -dset_index0_list '4,6..$'     \
                                 -set_labels female male        \
                                 -subs_betas 'Vrel#0_Coef'


   See "3dttest++ -help" for details on its options.

   --------------------

   B. 3dMEMA

      Note: these commands apply to the sample group data under
            AFNI_data6/group_results.

      Note: As with 3dttest, group comparisons are done as the second set minus
            the first set.


      1. The most simple case, providing just the datasets.  The subject IDs
         will be extracted from the dataset names.  Since no sub-bricks are
         provided, the betas will be 0 and t-stats will be 1.

            gen_group_command.py -command 3dMEMA           \
                                 -dsets REML*.HEAD

      2. This does not quite apply to AFNI_data6.  Assuming there are 2 group
         directories, write a 2-sample command.

            gen_group_command.py -command 3dMEMA           \
                                 -write_script cmd.mema.2  \
                                 -dsets groupA/REML*.HEAD  \
                                 -dsets groupB/REML*.HEAD

      3. Specify the sub-bricks, to compare Vrel vs. Arel.

            gen_group_command.py -command 3dMEMA           \
                                 -write_script cmd.mema.3  \
                                 -dsets REML*.HEAD         \
                                 -set_labels Arel Vrel     \
                                 -subs_betas 2 0           \
                                 -subs_tstats 3 1

      4. Similar to 3, but complete.  This basically generates the sample
         command AFNI_data6/group_results/s4.3dMEMA.V-A.

         Specify sub-bricks using the labels, request a paired test, and add
         some extra 3dMEMA options.

            gen_group_command.py -command 3dMEMA                            \
                                 -write_script cmd.mema.4                   \
                                 -prefix mema_V-A_paired                    \
                                 -type paired                               \
                                 -dsets REML*.HEAD                          \
                                 -set_labels Arel Vrel                      \
                                 -subs_betas  'Arel#0_Coef'  'Vrel#0_Coef'  \
                                 -subs_tstats 'Arel#0_Tstat' 'Vrel#0_Tstat' \
                                 -options                                   \
                                    -mask mask+tlrc -max_zeros 0.25         \
                                    -model_outliers -HKtest -jobs 2

      5. Make a paired test across 2 groups, but restrict the subjects to
         partial lists of all within a group.  This applies -dset_index0_list
         (or the sister -dset_index1_list).

            # assume these 9 subjects represent all under the 'data' dir
            set subjects = ( AA BB CC DD EE FF GG HH II )

         a. Do a simple test on subjects AA, HH, II and FF.  Indices are:
               0-based: 0, 7, 8, 5 (AA=0, ..., II=8)
               1-based: 1, 8, 9, 6 (AA=1, ..., II=9)

            gen_group_command.py -command 3dMEMA              \
                                 -write_script cmd.mema.5a    \
                                 -dsets data/REML*.HEAD       \
                                 -dset_index0_list '0,7,8,5'

         b. Do a paired test on those same subjects between betas with labels
            Arel and Vrel (and corresponding t-stats).

            gen_group_command.py -command 3dMEMA                            \
                                 -write_script cmd.mema.5b                  \
                                 -dsets data/REML*.HEAD                     \
                                 -dset_index0_list '0,7,8,5'                \
                                 -dsets data/REML*.HEAD                     \
                                 -dset_index0_list '0,7,8,5'                \
                                 -subs_betas  'Arel#0_Coef'  'Vrel#0_Coef'  \
                                 -subs_tstats 'Arel#0_Tstat' 'Vrel#0_Tstat' \
                                 -type paired

         See "3dMEMA -help" for details on the extra options.

------------------------------------------
terminal options:

   -help                     : show this help
   -hist                     : show module history
   -show_valid_opts          : list valid options
   -ver                      : show current version

required parameters:

   -command COMMAND_NAME     : resulting command, such as 3dttest++
   -dsets   datasets ...     : list of datasets
                                  (this option can be used more than once)

other options:

   -dset_index0_list values...  : restrict -dsets datasets to this 0-based list
   -dset_index1_list values...  : restrict -dsets datasets to this 1-based list

        In some cases it is easy to use a wildcard to specify datasets via
        -dsets, but there may be a grouping of subjects within that list.
        For example, if both males and females are in the list of datasets
        provided by -dsets, and if one wants a comparison between those 2
        groups, then a pair of -dset_index0_list could be specified (1 for
        each -dset) option to list which are the females and males.

        Consider this example:

             -dsets all/stats.*.HEAD            \
             -dset_index0_list '0..5,10..15'    \
             -dsets all/stats.*.HEAD            \
             -dset_index0_list '6..9,16..$'     \

        Note that -dsets is used twice, with IDENTICAL lists of datasets.
        The respective -dset_index0_list options then restrict those lists to
        0-based index lists, one for females, the other for males.

      * One must be careful to get the indices correct, so check the output
        command script to be sure the correct subjects are in each group.

        The difference between -dset_index0_list and -dset_index1_list is just
        that the former is a 0-based list (such as is used by AFNI programs),
        while the latter is 1-based (such as is used by tcsh).  A 0-based list
        begins counting at 0 (as in offsets), while a list 1-based starts at 1.
        Since use of either makes sense, both are provided.

        For example, these options are equivalent:

                -dset_index0_list 0,5..8
                -dset_index1_list 1,6..9

        The format for these index lists is the same as for AFNI sub-brick
        selection.

   -options OPT1 OPT2 ...       : list of options to pass along to result

        The given options will be passed directly to the resulting command.  If
        the -command is 3dMEMA, say, these should be 3dMEMA options.  This
        program will not evaluate or inspect the options, but will put them at
        the end of the command.

   -prefix PREFIX               : apply as COMMAND -prefix
   -set_labels LAB1 LAB2 ...    : labels corresponding to -dsets entries
   -subj_prefix PREFIX          : prefix for subject names (3dMEMA)
   -subj_suffix SUFFIX          : suffix for subject names (3dMEMA)
   -subs_betas B0 B1            : sub-bricks for beta weights (or similar)

        If this option is not given, sub-brick 0 will be used.  The entries
        can be either numbers or labels (which should match what is seen in
        the afni GUI, for example).

        If there are 2 -set_labels, there should be 2 betas (or no option).

   -subs_tstats T0 T1           : sub-bricks for t-stats (3dMEMA)

        If this option is not given, sub-brick 1 will be used.  The entries can
        be either numbers or labels (which should match what is seen in the
        afni GUI, for example).

        This option applies only to 3dMEMA currently, and in that case, its use
        should match that of -subs_betas.

        See also -subs_betas.

   -type TEST_TYPE              : specify the type of test to perform

        The test type may depend on the given command, but generally implies
        there are multiple sets of values to compare.  Currently valid tests
        are (for the given program):
       
          3dMEMA: paired, unpaired

        If this option is not applied, a useful default will be chosen.

   -verb LEVEL                  : set the verbosity level

   -write_script FILE_NAME      : write command script to FILE_NAME

        If this option is given, the command will be written to the specified
        file name.  Otherwise, it will be written to the terminal window.
       
-----------------------------------------------------------------------------
R Reynolds    October 2010
=============================================================================

