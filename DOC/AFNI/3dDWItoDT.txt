Usage: 3dDWItoDT [options] gradient-file dataset
Computes 6 principle direction tensors from multiple gradient vectors
 and corresponding DTI image volumes.
 The program takes two parameters as input :  
    a 1D file of the gradient vectors with lines of ASCII floats Gxi,Gyi,Gzi.
    Only the non-zero gradient vectors are included in this file (no G0 line).
    a 3D bucket dataset with Np+1 sub-briks where the first sub-brik is the
    volume acquired with no diffusion weighting.
 Options:
   -prefix pname = Use 'pname' for the output dataset prefix name.
    [default='DT']

   -automask =  mask dataset so that the tensors are computed only for
    high-intensity (presumably brain) voxels.  The intensity level is
    determined the same way that 3dClipLevel works.

   -mask dset = use dset as mask to include/exclude voxels

   -nonlinear = compute iterative solution to avoid negative eigenvalues.
    This is the default method.

   -linear = compute simple linear solution.

   -reweight = recompute weight factors at end of iterations and restart

   -max_iter n = maximum number of iterations for convergence (Default=10).
    Values can range from -1 to any positive integer less than 101.
    A value of -1 is equivalent to the linear solution.
    A value of 0 results in only the initial estimate of the diffusion tensor
    solution adjusted to avoid negative eigenvalues.

   -max_iter_rw n = max number of iterations after reweighting (Default=5)
    values can range from 1 to any positive integer less than 101.

   -eigs = compute eigenvalues, eigenvectors, fractional anisotropy and mean
    diffusivity in sub-briks 6-19. Computed as in 3dDTeig

   -debug_briks = add sub-briks with Ed (error functional), Ed0 (orig. error),
     number of steps to convergence and I0 (modeled B0 volume)

   -cumulative_wts = show overall weight factors for each gradient level
    May be useful as a quality control

   -verbose nnnnn = print convergence steps every nnnnn voxels that survive to
    convergence loops (can be quite lengthy).

   -drive_afni nnnnn = show convergence graphs every nnnnn voxels that survive
    to convergence loops. AFNI must have NIML communications on (afni -niml)

   -sep_dsets = save tensor, eigenvalues,vectors,FA,MD in separate datasets

   -opt mname =  if mname is 'powell', use Powell's 2004 method for optimization
    If mname is 'gradient' use gradient descent method. If mname is 'hybrid',
    use combination of methods.
    MJD Powell, "The NEWUOA software for unconstrained optimization without
    derivatives", Technical report DAMTP 2004/NA08, Cambridge University
    Numerical Analysis Group -- http://www.damtp.cam.ac.uk/user/na/reports.html

 Example:
  3dDWItoDT -prefix rw01 -automask -reweight -max_iter 10 \
            -max_iter_rw 10 tensor25.1D grad02+orig.

 The output is a 6 sub-brick bucket dataset containing Dxx,Dxy,Dyy,Dxz,Dyz,Dzz
 (the lower triangular, row-wise elements of the tensor in symmetric matrix form)
 Additional sub-briks may be appended with the -eigs and -debug_briks options.
 These results are appropriate as the input to the 3dDTeig program.


INPUT DATASET NAMES
-------------------
This program accepts datasets that are modified on input according to the
following schemes:
  'r1+orig[3..5]'                                    {sub-brick selector}
  'r1+orig<100..200>'                                {sub-range selector}
  'r1+orig[3..5]<100..200>'                          {both selectors}
  '3dcalc( -a r1+orig -b r2+orig -expr 0.5*(a+b) )'  {calculation}
For the gruesome details, see the output of 'afni -help'.
