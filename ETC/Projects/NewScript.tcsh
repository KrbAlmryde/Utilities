#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Wed Nov  3 10:49:59 2010"
echo "(version 2.22, March 28, 2010)"

# execute via : 
#   tcsh -xef Processor5 |& tee output.Processor5

# ================================= setup ==================================
# script setup

#set images_home = /Volumes/Maxtor/Data/Stroop

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = ${subj}
    
endif

set run = $2
#set base = $3

# assign home directory
#set subj_dir = $images_home/${subj}

# assign output directory name
set output_dir = ${subj}_${run}_newprocess

# assign group directory name
#set group_dir = $images_home/AnovaData/NewProcess

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "${subj}_${run}_results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 1`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy stim files into stimulus directory
cp voice_fvfw_stim.txt voice_fvmw_stim.txt voice_fvnw_stim.txt  \
    voice_mvmw_stim.txt voice_mvfw_stim.txt voice_mvnw_stim.txt \
    voice_null_stim.txt $output_dir/stimuli

# copy anatomy to results dir
3dcopy ${subj}_spgr+orig $output_dir/${subj}_spgr

# ================================== tcat ==================================
echo "apply 3dTcat to copy input dsets to results dir, while removing the first 4 TRs"
3dTcat -prefix $output_dir/${subj}_${run}_tcat ${subj}_voice_epan+orig'[4..$]'

# and enter the results directory
cd $output_dir

# ================================= tshift =================================
echo "run 3dToutcount and 3dTshift for each run"

    3dToutcount -automask ${subj}_${run}_tcat+orig > outcount_${run}.1D

    3dTshift -tzero 0 -quintic -prefix ${subj}_${run}_tshift \
             ${subj}_${run}_tcat+orig


# ================================= align ==================================
echo "align anatomy to EPI registration base"
align_epi_anat.py -anat2epi              \
       -anat ${subj}_spgr+orig               \
       -epi ${subj}_${run}_tshift+orig \
       -epi_base 2 -volreg off -tshift off

# ================================== tlrc ==================================
echo warp anatomy to standard space
@auto_tlrc -base TT_N27+tlrc -input ${subj}_spgr+orig -suffix NONE

# ================================= volreg =================================
echo align each dset to base volume, align to anat, warp to tlrc space

# verify that we have a +tlrc warp dataset
if ( ! -f ${subj}_spgr+tlrc.HEAD ) then
    echo "** missing +tlrc warp dataset: ${subj}_spgr+tlrc.HEAD" 
    exit
endif

echo create an all-1 dataset to mask the extents of the warp
3dcalc -a ${subj}_${run}_tshift+orig -expr 1 -prefix rm.epi.all1

echo register and warp

    # register each volume to the base
    3dvolreg -verbose -zpad 1 -base ${subj}_${run}_tshift+orig'[154]' \
             -1Dfile dfile_${run}_1D -prefix rm.epi.volreg.${run}       \
             -cubic                                                    \
             -1Dmatrix_save mat_${run}_vr.aff12.1D                     \
             ${subj}_${run}_tshift+orig

    # catenate volreg, epi2anat and tlrc transformations
    cat_matvec -ONELINE                                               \
               ${subj}_spgr+tlrc::WARP_DATA -I                            \
               ${subj}_spgr_al_mat.aff12.1D -I                            \
               mat_${run}_vr.aff12.1D > mat_${run}_warp.aff12.1D

    # apply catenated xform : volreg, epi2anat and tlrc
    3dAllineate -base ${subj}_spgr+tlrc                                   \
                -input ${subj}_${run}_tshift+orig               \
                -1Dmatrix_apply mat_${run}_warp.aff12.1D               \
                -mast_dxyz 3.5                                        \
                -prefix rm.epi.nomask.${run} 

    # warp the all-1 dataset for extents masking 
    3dAllineate -base ${subj}_spgr+tlrc                                   \
                -input rm.epi.all1+orig                               \
                -1Dmatrix_apply mat_${run}_warp.aff12.1D               \
                -mast_dxyz 3.5 -final NN -quiet                       \
                -prefix rm.epi.1.${run} 

    # make an extents intersection mask of this run
    3dTstat -min -prefix rm.epi.min.${run} rm.epi.1.${run}+tlrc


# make a single file of registration params
cat dfile_${run}_1D > dfile.rall.1D

# ----------------------------------------
echo "create the extents mask: mask_epi_extents+tlrc
echo "(this is a mask of voxels that have valid data at every TR)
echo "(only 1 run, so just use 3dcopy to keep naming straight)
3dcopy rm.epi.min.${run} mask_epi_extents

echo "and apply the extents mask to the EPI data 
# (delete any time series with missing data)

    3dcalc -a rm.epi.nomask.${run}+tlrc -b mask_epi_extents+tlrc       \
           -expr 'a*b' -prefix ${subj}_${run}_volreg


# ================================== blur ==================================
echo "blur each volume of each run

    3dmerge -1blur_fwhm 5.0 -doall -prefix ${subj}_${run}_blur \
            ${subj}_${run}_volreg+tlrc


# ================================== mask ==================================
echo "create 'full_mask' dataset (union mask)

    3dAutomask -dilate 1 -prefix rm.mask_${run} ${subj}_${run}_blur+tlrc


# only 1 run, so copy this to full_mask
3dcopy rm.mask_${run}+tlrc full_mask_${subj}

# ---- create subject anatomy mask, mask_anat.${subj}+tlrc ----
#      (resampled from tlrc anat)
3dresample -master full_mask_${subj}+tlrc -prefix rm.resam.anat    \
           -input ${subj}_spgr+tlrc

# convert resampled anat brain to binary mask
3dcalc -a rm.resam.anat+tlrc -expr 'ispositive(a)' -prefix mask_anat.${subj}

# ---- create group anatomy mask, mask_group+tlrc ----
#      (resampled from tlrc base anat, TT_N27+tlrc)
3dresample -master full_mask_${subj}+tlrc -prefix ./rm.resam.group \
           -input /Volumes/Maxtor/Data/Stroop/TT_N27+tlrc

# convert resampled group brain to binary mask
3dcalc -a rm.resam.group+tlrc -expr 'ispositive(a)' -prefix mask_group

# ================================= scale ==================================
echo "scale each voxel time series to have a mean of 100"
# (be sure no negatives creep in)
# (subject to a range of [0,200])

    3dTstat -prefix rm.mean_${run} ${subj}_${run}_blur+tlrc
    3dcalc -a ${subj}_${run}_blur+tlrc -b rm.mean_${run}+tlrc \
           -c mask_group+tlrc                                      \
           -expr 'c * min(200, a/b*100)*step(a)*step(b)'           \
           -prefix ${subj}_${run}_scale


# ================================ regress =================================
# run the regression analysis

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -infile dfile.rall.1D -set_nruns 1                         \
    -set_tr 3.5 -show_censor_count -censor_prev_TR                    \
    -censor_motion 0.3 motion_${subj}

3dDeconvolve -input ${subj}_${run}_scale+tlrc.HEAD                  \
    -censor motion_${subj}_censor.1D                                  \
    -polort 5                                                         \
    -mask mask_group+tlrc                                             \
    -num_stimts 13                                                    \
    -stim_times 1 stimuli/voice_fvfw_stim.txt 'GAM'                   \
    -stim_label 1 fvfw                                              \
    -stim_times 2 stimuli/voice_fvmw_stim.txt 'GAM'                   \
    -stim_label 2 fvmw                                              \
    -stim_times 3 stimuli/voice_fvnw_stim.txt 'GAM'                   \
    -stim_label 3 fvnw                                              \
    -stim_times 4 stimuli/voice_mvmw_stim.txt 'GAM'                   \
    -stim_label 4 mvmw                                              \
    -stim_times 5 stimuli/voice_mvfw_stim.txt 'GAM'                   \
    -stim_label 5 mvfw                                              \
    -stim_times 6 stimuli/voice_mvnw_stim.txt 'GAM'                   \
    -stim_label 6 mvnw                                              \
    -stim_times 7 stimuli/voice_null_stim.txt 'GAM'                   \
    -stim_label 7 null                                              \
    -stim_file 8 dfile.rall.1D'[0]' -stim_base 8 -stim_label 8 roll   \
    -stim_file 9 dfile.rall.1D'[1]' -stim_base 9 -stim_label 9 pitch  \
    -stim_file 10 dfile.rall.1D'[2]' -stim_base 10 -stim_label 10 yaw \
    -stim_file 11 dfile.rall.1D'[3]' -stim_base 11 -stim_label 11 dS  \
    -stim_file 12 dfile.rall.1D'[4]' -stim_base 12 -stim_label 12 dL  \
    -stim_file 13 dfile.rall.1D'[5]' -stim_base 13 -stim_label 13 dP  \
    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                           \
    -fitts fitts_${subj}                                                \
    -bucket Stats_${subj}


# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif


# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs_${subj} ${subj}_${run}_scale+tlrc.HEAD

# in case of censoring, create uncensored X-matrix
1d_tool.py -infile X.xmat.1D -censor_fill -write X.uncensored.xmat.1D

# create ideal files for each stim type
1dcat X.uncensored.xmat.1D'[6]' > ideal_fvfw.1D
1dcat X.uncensored.xmat.1D'[7]' > ideal_fvmw.1D
1dcat X.uncensored.xmat.1D'[8]' > ideal_fvnw.1D
1dcat X.uncensored.xmat.1D'[9]' > ideal_mvmw.1D
1dcat X.uncensored.xmat.1D'[10]' > ideal_mvfw.1D
1dcat X.uncensored.xmat.1D'[11]' > ideal_mvnw.1D
1dcat X.uncensored.xmat.1D'[12]' > ideal_null.1D

# =========================== gen_epi_review.py ============================
# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.${subj} \
    -dsets ${subj}_${run}_tcat+orig.HEAD

# ================================ cleanup =================================

# remove temporary rm.* files
\rm -f rm.*

# return to parent directory
cd ..




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id SUBJ -script Processor5 -sep_char _ -out_dir      \
#     SUBJ_results -do_block align tlrc -copy_anat ${subj}_spgr+orig -dsets   \
#     ${subj}_voice_epan+orig.HEAD -tcat_remove_first_trs 4 -volreg_align_e2a \
#     -volreg_tlrc_warp -volreg_interp cubic -mask_apply group            \
#     -regress_censor_motion 0.3 -regress_stim_times voice_fvfw_stim.txt  \
#     voice_fvmw_stim.txt voice_fvnw_stim.txt voice_mvmw_stim.txt         \
#     voice_mvfw_stim.txt voice_mvnw_stim.txt voice_null_stim.txt
